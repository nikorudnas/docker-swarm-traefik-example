# Remember to create the required files (acme.json) and networks before running this
# sudo touch acme.json -> sudo chmod 600 acme.json
version: "3.3"

services:
  reverse-proxy:
    image: traefik
    command:
      - "--logLevel=DEBUG"
      - "--api"
      - "--defaultentrypoints=https"
      - "--entrypoints=Name:http Address::80 Redirect.EntryPoint:https"
      - "--entrypoints=Name:https Address::443 Compress:true TLS"
      - "--acme"
      - "--acme.storage=/etc/traefik/acme.json"
      - "--acme.domains=jaws.biz,traefik.jaws.biz,api.jaws.biz,visualizer.jaws.biz,db.jaws.biz"
      - "--acme.entryPoint=https"
      - "--acme.httpChallenge.entryPoint=http"
      - "--acme.onHostRule=true"
      - "--acme.onDemand=false"
      - "--acme.email=niko.rudnas@seamk.fi"
      - "--docker"
      - "--docker.endpoint=unix:///var/run/docker.sock"
      - "--docker.swarmMode"
      - "--docker.domain=jaws.biz"
      - "--docker.watch"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.backend=traefik"
        - "traefik.frontend.rule=Host:traefik.jaws.biz"
        - "traefik.port=8080"
        # ubuntu - Traefik123
        - "traefik.frontend.auth.basic.users=ubuntu:$$apr1$$80PJRERI$$grh9vslfhzyx4fPt9i3mt."
        # - traefik.frontend.redirect.regex=^https?://www.jaws.biz/(.*)
        # - traefik.frontend.redirect.replacement=https://jaws.biz/$${1}
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/etc/traefik/

  datastore-server:
    image: jaws404/datastore-server
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.backend=datastore-server"
        - "traefik.frontend.rule=Host:api.jaws.biz"
        - "traefik.port=3001"
        - "traefik.docker.network=jawz_proxy"
        # Rate limit
        - "traefik.frontend.rateLimit.extractorFunc=client.ip"
        - "traefik.frontend.rateLimit.rateSet.r1.period=3s"
        - "traefik.frontend.rateLimit.rateSet.r1.average=10"
        - "traefik.frontend.rateLimit.rateSet.r1.burst=30"
    networks:
      - internal
      - proxy

  datastore-client:
    image: jaws404/datastore-client
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      labels:
        - "traefik.backend=datastore-client"
        - "traefik.frontend.rule=Host:jaws.biz"
        - "traefik.port=80"
    networks:
      - proxy

  mongo:
    image: mvertes/alpine-mongo
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    volumes:
      - mongo:/data/db
    networks:
      - internal

  visualizer:
    image: dockersamples/visualizer
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.backend=visualizer"
        - "traefik.frontend.rule=Host:visualizer.jaws.biz"
        - "traefik.port=8080"
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  internal:
  proxy:
    driver: overlay

volumes:
  mongo:
    external: true
